@{
    ViewData["Title"] = "HockeyDJ - Hockey Music Controller";
}

<!DOCTYPE html>
<html>
<head>
    <title>@ViewData["Title"]</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            margin: 0;
            padding: 20px;
            min-height: 100vh;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

            .header h1 {
                font-size: 3em;
                margin: 0;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
                background: linear-gradient(45deg, #ff6b35, #f7931e);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                background-clip: text;
            }

        .current-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            text-align: center;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .goal-horn-section {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            text-align: center;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .goal-horn-btn {
            background: linear-gradient(45deg, #ff6b35, #f7931e);
            color: white;
            padding: 20px 40px;
            border: none;
            border-radius: 50px;
            font-size: 24px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(255, 107, 53, 0.3);
            position: relative;
            animation: glow 2s ease-in-out infinite alternate;
        }

            .goal-horn-btn:hover {
                background: linear-gradient(45deg, #e55a2b, #e0841a);
                transform: scale(1.1) translateY(-3px);
                box-shadow: 0 8px 25px rgba(255, 107, 53, 0.5);
            }

            .goal-horn-btn:active {
                transform: scale(1.05) translateY(-1px);
            }

            .goal-horn-btn:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
                animation: none;
            }

        .song-selector {
            margin: 20px 0;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        .song-selector label {
            font-weight: bold;
            color: #ff6b35;
            font-size: 16px;
        }

        .song-dropdown {
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 107, 53, 0.3);
            border-radius: 8px;
            color: white;
            padding: 8px 15px;
            font-size: 16px;
            font-weight: bold;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }

        .song-dropdown:focus {
            outline: none;
            border-color: #ff6b35;
            background: rgba(255, 255, 255, 0.2);
        }

        .song-dropdown option {
            background: #1e3c72;
            color: white;
            padding: 8px;
        }

        .sound-buttons {
            display: flex;
            gap: 20px;
            justify-content: center;
            margin-top: 20px;
        }

        .mushroom-btn {
            background: radial-gradient(circle at 30% 30%, #ff4444, #cc0000);
            color: white;
            padding: 15px;
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            font-size: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(204, 0, 0, 0.4);
            position: relative;
            border: 2px solid white;
        }

            .mushroom-btn:hover {
                transform: scale(1.1) translateY(-3px);
                box-shadow: 0 8px 20px rgba(204, 0, 0, 0.6);
            }

            .mushroom-btn:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }

        .clock-btn {
            background: linear-gradient(45deg, #2196F3, #1976D2);
            color: white;
            padding: 15px;
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            font-size: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(33, 150, 243, 0.4);
            position: relative;
            border: 2px solid #0D47A1;
        }

            .clock-btn:hover {
                transform: scale(1.1) translateY(-3px);
                box-shadow: 0 8px 20px rgba(33, 150, 243, 0.6);
            }

            .clock-btn:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }

        @@keyframes glow {
            from {
                box-shadow: 0 5px 15px rgba(255, 107, 53, 0.3);
            }

            to {
                box-shadow: 0 5px 25px rgba(255, 107, 53, 0.6);
            }
        }

        .players-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            max-width: 1400px;
            margin: 0 auto;
            margin-bottom: 40px;
        }

        .player {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

            .player:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
            }

            .player h3 {
                margin: 0 0 15px 0;
                color: #ff6b35;
                font-size: 1.2em;
            }

        .player-controls {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        .btn {
            flex: 1;
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-play {
            background: linear-gradient(45deg, #28a745, #20c997);
            color: white;
        }

            .btn-play:hover {
                background: linear-gradient(45deg, #218838, #1ba085);
                transform: scale(1.05);
            }

        .btn-pause {
            background: linear-gradient(45deg, #dc3545, #fd7e14);
            color: white;
        }

            .btn-pause:hover {
                background: linear-gradient(45deg, #c82333, #e96b00);
                transform: scale(1.05);
            }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .track-info {
            font-size: 14px;
            color: #e0e0e0;
            min-height: 40px;
        }

        .track-name {
            font-weight: bold;
            color: white;
        }

        .loading {
            text-align: center;
            padding: 40px;
            font-size: 18px;
        }

        .error {
            background: rgba(220, 53, 69, 0.2);
            border: 1px solid #dc3545;
            border-radius: 8px;
            padding: 15px;
            margin: 20px 0;
            text-align: center;
        }

        .setup-link {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(255, 255, 255, 0.2);
            padding: 10px 20px;
            border-radius: 8px;
            text-decoration: none;
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

            .setup-link:hover {
                background: rgba(255, 255, 255, 0.3);
                color: white;
                text-decoration: none;
            }

        /* Priority Queue Styles */
        .priority-queue-section {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 30px;
            margin: 40px auto;
            max-width: 1400px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .priority-queue-header {
            text-align: center;
            margin-bottom: 30px;
        }

            .priority-queue-header h2 {
                color: #ff6b35;
                font-size: 2em;
                margin: 0 0 10px 0;
            }

            .priority-queue-header p {
                color: rgba(255, 255, 255, 0.8);
                margin: 0;
            }

        .search-section {
            display: flex;
            gap: 15px;
            margin-bottom: 30px;
            align-items: center;
        }

        .search-input {
            flex: 1;
            padding: 15px 20px;
            border: 2px solid rgba(255, 107, 53, 0.3);
            border-radius: 12px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 16px;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }

            .search-input:focus {
                outline: none;
                border-color: #ff6b35;
                background: rgba(255, 255, 255, 0.2);
                box-shadow: 0 0 20px rgba(255, 107, 53, 0.3);
            }

            .search-input::placeholder {
                color: rgba(255, 255, 255, 0.6);
            }

        .search-btn {
            background: linear-gradient(45deg, #ff6b35, #f7931e);
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 12px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(255, 107, 53, 0.3);
            white-space: nowrap;
        }

            .search-btn:hover {
                background: linear-gradient(45deg, #e55a2b, #e0841a);
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(255, 107, 53, 0.4);
            }

            .search-btn:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }

        .search-results {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            margin-bottom: 30px;
            max-height: 300px;
            overflow-y: auto;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .search-result-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 15px 20px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
            transition: background 0.2s ease;
        }

            .search-result-item:hover {
                background: rgba(255, 255, 255, 0.1);
            }

            .search-result-item:last-child {
                border-bottom: none;
            }

        .search-result-info {
            flex: 1;
        }

            .search-result-info .track-name {
                font-size: 16px;
                font-weight: bold;
                color: white;
                margin-bottom: 4px;
            }

            .search-result-info .track-artist {
                font-size: 14px;
                color: rgba(255, 255, 255, 0.7);
                margin-bottom: 2px;
            }

            .search-result-info .track-album {
                font-size: 12px;
                color: rgba(255, 255, 255, 0.5);
            }

        .add-to-queue-btn {
            background: linear-gradient(45deg, #28a745, #20c997);
            color: white;
            padding: 8px 16px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            white-space: nowrap;
        }

            .add-to-queue-btn:hover {
                background: linear-gradient(45deg, #218838, #1ba085);
                transform: scale(1.05);
            }

            .add-to-queue-btn:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }

        .queue-display {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .queue-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 20px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

            .queue-header h3 {
                color: #ff6b35;
                margin: 0;
                font-size: 1.3em;
            }

        .queue-controls {
            display: flex;
            gap: 10px;
        }

        .clear-queue-btn {
            background: linear-gradient(45deg, #dc3545, #fd7e14);
            color: white;
            padding: 8px 16px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .clear-queue-btn:hover {
                background: linear-gradient(45deg, #c82333, #e96b00);
                transform: scale(1.05);
            }

            .clear-queue-btn:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }

        .queue-list {
            max-height: 300px;
            overflow-y: auto;
        }

        .queue-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 15px 20px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
            transition: background 0.2s ease;
        }

            .queue-item:hover {
                background: rgba(255, 255, 255, 0.1);
            }

            .queue-item:last-child {
                border-bottom: none;
            }

        .queue-item-info {
            flex: 1;
        }

            .queue-item-info .track-name {
                font-size: 16px;
                font-weight: bold;
                color: white;
                margin-bottom: 4px;
            }

            .queue-item-info .track-artist {
                font-size: 14px;
                color: rgba(255, 255, 255, 0.7);
            }

        .queue-item-number {
            background: rgba(255, 107, 53, 0.3);
            color: #ff6b35;
            font-weight: bold;
            font-size: 14px;
            padding: 4px 8px;
            border-radius: 50%;
            margin-right: 15px;
            min-width: 30px;
            text-align: center;
        }

        .remove-from-queue-btn {
            background: rgba(220, 53, 69, 0.3);
            color: #dc3545;
            border: 1px solid #dc3545;
            padding: 6px 12px;
            border-radius: 6px;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .remove-from-queue-btn:hover {
                background: rgba(220, 53, 69, 0.5);
                color: white;
            }

        .empty-queue {
            text-align: center;
            padding: 40px 20px;
            color: rgba(255, 255, 255, 0.6);
            font-style: italic;
        }

        .queue-status {
            background: rgba(255, 107, 53, 0.1);
            border: 1px solid rgba(255, 107, 53, 0.3);
            border-radius: 8px;
            padding: 10px 15px;
            margin-bottom: 20px;
            text-align: center;
            font-weight: bold;
            color: #ff6b35;
        }

        /* Scrollbar Styles */
        .search-results::-webkit-scrollbar,
        .queue-list::-webkit-scrollbar {
            width: 8px;
        }

        .search-results::-webkit-scrollbar-track,
        .queue-list::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
        }

        .search-results::-webkit-scrollbar-thumb,
        .queue-list::-webkit-scrollbar-thumb {
            background: rgba(255, 107, 53, 0.5);
            border-radius: 4px;
        }

        .search-results::-webkit-scrollbar-thumb:hover,
        .queue-list::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 107, 53, 0.7);
        }

        /* Mobile Responsiveness */
        @@media (max-width: 768px) {
            .search-section {
                flex-direction: column;
                gap: 10px;
            }

            .search-btn {
                width: 100%;
            }

            .queue-header {
                flex-direction: column;
                gap: 15px;
                text-align: center;
            }

            .queue-controls {
                justify-content: center;
            }

            .search-result-item,
            .queue-item {
                flex-direction: column;
                gap: 10px;
                text-align: center;
            }

            .search-result-info,
            .queue-item-info {
                order: 2;
            }

            .add-to-queue-btn,
            .remove-from-queue-btn {
                order: 3;
                width: 100%;
            }

            .queue-item-number {
                order: 1;
                margin-right: 0;
            }
        }
    </style>
</head>
<body>
    <a href="@Url.Action("Setup")" class="setup-link">⚙️ Settings</a>

    <div class="header">
        <h1>🏒 HockeyDJ</h1>
        <p>Hockey-Powered Music Controller</p>
    </div>

    <div class="current-track" id="currentTrackDisplay">
        <strong>Ready to Play!</strong><br>
        Select a playlist below to start your hockey soundtrack
    </div>

    <div class="goal-horn-section">
        <h3 style="color: #ff6b35; margin-bottom: 15px;">🚨 GOAL! 🚨</h3>
        
        <div class="song-selector">
            <label for="songSelector">Song Selection:</label>
            <select id="songSelector" class="song-dropdown">
                <option value="random">🎲 Random Song</option>
                <option value="1">🎵 Song 1</option>
                <option value="2">🎵 Song 2</option>
                <option value="3">🎵 Song 3</option>
                <option value="4">🎵 Song 4</option>
                <option value="5">🎵 Song 5</option>
                <option value="6">🎵 Song 6</option>
                <option value="7">🎵 Song 7</option>
                <option value="8">🎵 Song 8</option>
                <option value="9">🎵 Song 9</option>
                <option value="10">🎵 Song 10</option>
                <option value="11">🎵 Song 11</option>
                <option value="12">🎵 Song 12</option>
                <option value="13">🎵 Song 13</option>
                <option value="14">🎵 Song 14</option>
                <option value="15">🎵 Song 15</option>
                <option value="16">🎵 Song 16</option>
                <option value="17">🎵 Song 17</option>
                <option value="18">🎵 Song 18</option>
                <option value="19">🎵 Song 19</option>
                <option value="20">🎵 Song 20</option>
            </select>
        </div>

        <button class="goal-horn-btn" id="goalHornBtn" onclick="playGoalHorn()">
            📯 GOAL HORN 📯
        </button>
        
        <div class="sound-buttons">
            <button class="mushroom-btn" id="mushroomBtn" onclick="playMushroomSound()" title="Even Strength (Extra Life) Sound">
                🍄
            </button>
            <button class="clock-btn" id="clockBtn" onclick="playClockSound()" title="One Minute Remaining Sound">
                🕐
            </button>
        </div>
        <p style="margin-top: 15px; font-size: 14px; color: rgba(255,255,255,0.8);">
            Choose a song number or random, then click to celebrate with the goal horn + victory song!<br>
            <small>Power up & timeout sounds available too!</small>
        </p>
    </div>

    <div id="loadingMessage" class="loading" style="display: none;">
        Loading Spotify Player...
    </div>

    <div id="errorMessage" class="error" style="display: none;"></div>

    <div class="players-grid" id="playersGrid">
        <!-- Players will be generated by JavaScript -->
    </div>

    <!-- Priority Queue Section -->
    <div class="priority-queue-section">
        <div class="priority-queue-header">
            <h2>🎯 Priority Queue</h2>
            <p>Search for songs and add them to your priority queue. These songs will play before random selections.</p>
        </div>

        <div id="queueStatus" class="queue-status" style="display: none;">
            Priority queue active! Songs will play in order before random selections.
        </div>

        <div class="search-section">
            <input type="text" id="searchInput" class="search-input" placeholder="Search for songs on Spotify..." />
            <button id="searchBtn" class="search-btn" onclick="searchSpotify()">🔍 Search</button>
        </div>

        <div id="searchResults" class="search-results" style="display: none;">
            <!-- Search results will be populated here -->
        </div>

        <div class="queue-display">
            <div class="queue-header">
                <h3>Queue (<span id="queueCount">0</span> songs)</h3>
                <div class="queue-controls">
                    <button id="clearQueueBtn" class="clear-queue-btn" onclick="clearPriorityQueue()" disabled>🗑️ Clear Queue</button>
                </div>
            </div>
            <div id="queueList" class="queue-list">
                <div class="empty-queue" id="emptyQueueMessage">
                    Your priority queue is empty. Search for songs above to add them to the queue.
                </div>
            </div>
        </div>
    </div>

    <script src="https://sdk.scdn.co/spotify-player.js"></script>
    <script>
        // Global variables
        let spotifyPlayer;
        let deviceId;
        let currentPlaylists = @Html.Raw(ViewBag.Playlists ?? "[]");
        let accessToken = '@ViewBag.AccessToken';
        let goalHornPlaylistId = '@ViewBag.GoalHornPlaylistId';
        let playlistTracks = {};
        let playlistNames = {};
        let goalHornAudio = null;
        let mushroomAudio = null;
        let clockAudio = null;
        let priorityQueue = @Html.Raw(ViewBag.PriorityQueue ?? "[]");
        let isSearching = false;

    <script src="https://sdk.scdn.co/spotify-player.js"></script>
    <script>
        window.onSpotifyWebPlaybackSDKReady = () => {
            initializeHockeyDJ();
        };

        let spotifyPlayer;
        let deviceId;
        let currentPlaylists = @Html.Raw(ViewBag.Playlists ?? "[]");
        let accessToken = '@ViewBag.AccessToken';
        let goalHornPlaylistId = '@ViewBag.GoalHornPlaylistId';
        let playlistTracks = {};
        let playlistNames = {};
        let goalHornAudio = null;
        let mushroomAudio = null;
        let clockAudio = null;
        let priorityQueue = @Html.Raw(ViewBag.PriorityQueue ?? "[]");
        let isSearching = false;

        async function initializeHockeyDJ() {
            document.getElementById('loadingMessage').style.display = 'block';

            try {
                spotifyPlayer = new Spotify.Player({
                    name: 'HockeyDJ Player',
                    getOAuthToken: cb => { cb(accessToken); },
                    volume: 0.8
                });

                // Error handling
                spotifyPlayer.addListener('initialization_error', ({ message }) => {
                    showError('Failed to initialize player: ' + message);
                });

                spotifyPlayer.addListener('authentication_error', ({ message }) => {
                    showError('Failed to authenticate: ' + message);
                });

                spotifyPlayer.addListener('account_error', ({ message }) => {
                    showError('Failed to validate account: ' + message);
                });

                spotifyPlayer.addListener('playback_error', ({ message }) => {
                    showError('Failed to perform playback: ' + message);
                });

                // Playback status updates
                spotifyPlayer.addListener('player_state_changed', (state) => {
                    if (state) {
                        updateCurrentTrack(state.track_window.current_track);
                    }
                });

                // Ready
                spotifyPlayer.addListener('ready', ({ device_id }) => {
                    console.log('Ready with Device ID', device_id);
                    deviceId = device_id;
                    document.getElementById('loadingMessage').style.display = 'none';
                    setupPlayers();
                });

                // Not Ready
                spotifyPlayer.addListener('not_ready', ({ device_id }) => {
                    console.log('Device ID has gone offline', device_id);
                });

                // Connect to the player!
                spotifyPlayer.connect();

                // Initialize goal horn audio
                initializeAudio();

                // Initialize priority queue display
                updatePriorityQueueDisplay();

            } catch (error) {
                showError('Error initializing Spotify player: ' + error.message);
                document.getElementById('loadingMessage').style.display = 'none';
            }
        }

        function initializeAudio() {
            // Goal horn audio
            goalHornAudio = new Audio();
            goalHornAudio.preload = 'auto';
            goalHornAudio.volume = 0.8;
            goalHornAudio.src = '/audio/goal-horn.mp3';
            goalHornAudio.onerror = () => {
                console.warn('Goal horn audio file not found.');
            };

            // Mushroom audio
            mushroomAudio = new Audio();
            mushroomAudio.preload = 'auto';
            mushroomAudio.volume = 0.8;
            mushroomAudio.src = '/audio/mushroom.mp3';
            mushroomAudio.onerror = () => {
                console.warn('Mushroom audio file not found.');
            };

            // Clock audio
            clockAudio = new Audio();
            clockAudio.preload = 'auto';
            clockAudio.volume = 0.8;
            clockAudio.src = '/audio/clock.mp3';
            clockAudio.onerror = () => {
                console.warn('Clock audio file not found.');
            };

            // Use the goal horn playlist ID from server, or fall back to first playlist
            if (!goalHornPlaylistId && currentPlaylists.length > 0) {
                goalHornPlaylistId = currentPlaylists[0].Id;
            }
        }

        function setupPlayers() {
            const grid = document.getElementById('playersGrid');
            grid.innerHTML = '';

            currentPlaylists.forEach((playlist, index) => {
                const playerDiv = document.createElement('div');
                playerDiv.className = 'player';
                playerDiv.innerHTML = `
                    <h3 id="playlistTitle${index}">🎵 ${playlist.Name}</h3>
                    <div class="player-controls">
                        <button class="btn btn-play" onclick="playRandomFromPlaylist('${playlist.Id}', ${index})">
                            ▶️ Play Random
                        </button>
                        <button class="btn btn-pause" onclick="pausePlayback()">
                            ⏸️ Pause
                        </button>
                    </div>
                    <div class="track-info" id="trackInfo${index}">
                        Loading playlist information...
                    </div>
                `;
                grid.appendChild(playerDiv);

                // Pre-load playlist tracks and update the title
                loadPlaylistTracks(playlist.Id, index);
            });
        }

        async function loadPlaylistTracks(playlistId, playerIndex) {
            try {
                const response = await fetch('/Home/GetPlaylistTracks', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `playlistId=${playlistId}`
                });

                const data = await response.json();
                if (data.success) {
                    playlistTracks[playlistId] = data.tracks;
                    playlistNames[playlistId] = data.playlistName;

                    // Update the playlist title with the actual name
                    const titleElement = document.getElementById(`playlistTitle${playerIndex}`);
                    if (titleElement) {
                        titleElement.textContent = `🎵 ${data.playlistName}`;
                    }

                    // Update the track info
                    const trackInfoElement = document.getElementById(`trackInfo${playerIndex}`);
                    if (trackInfoElement) {
                        trackInfoElement.innerHTML = `Click play to load a random track from this playlist (${data.tracks.length} tracks)`;
                    }
                } else {
                    console.error('Error loading playlist:', data.error);
                    // Update UI to show error
                    const trackInfoElement = document.getElementById(`trackInfo${playerIndex}`);
                    if (trackInfoElement) {
                        trackInfoElement.innerHTML = `<span style="color: #dc3545;">Error loading playlist: ${data.error}</span>`;
                    }
                }
            } catch (error) {
                console.error('Error loading playlist tracks:', error);
                const trackInfoElement = document.getElementById(`trackInfo${playerIndex}`);
                if (trackInfoElement) {
                    trackInfoElement.innerHTML = `<span style="color: #dc3545;">Error loading playlist tracks</span>`;
                }
            }
        }

        async function playRandomFromPlaylist(playlistId, playerIndex) {
            try {
                // Check if there are songs in the priority queue (excluding goal horn triggers)
                if (priorityQueue.length > 0 && !isGoalHornPlaying) {
                    await playFromPriorityQueue();
                    return;
                }

                const tracks = playlistTracks[playlistId];
                if (!tracks || tracks.length === 0) {
                    showError('No tracks available in this playlist');
                    return;
                }

                // Select random track
                const randomTrack = tracks[Math.floor(Math.random() * tracks.length)];

                // Update track info immediately
                const trackInfoElement = document.getElementById(`trackInfo${playerIndex}`);
                trackInfoElement.innerHTML = `
                    <div class="track-name">🎵 ${randomTrack.name}</div>
                    <div>🎤 ${randomTrack.artist}</div>
                `;

                // Transfer playback to our device first
                await fetch(`https://api.spotify.com/v1/me/player`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${accessToken}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        device_ids: [deviceId],
                        play: false
                    })
                });

                // Start playing the track
                await fetch(`https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${accessToken}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        uris: [randomTrack.uri]
                    })
                });

            } catch (error) {
                console.error('Error playing track:', error);
                showError('Error playing track: ' + error.message);
            }
        }

        let isGoalHornPlaying = false;

        async function playGoalHorn() {
            const goalHornBtn = document.getElementById('goalHornBtn');
            const songSelector = document.getElementById('songSelector');
            const selectedValue = songSelector.value;
            
            goalHornBtn.disabled = true;
            goalHornBtn.textContent = '🎺 CELEBRATING... 🎺';
            isGoalHornPlaying = true;

            try {
                // Play the goal horn sound first
                if (goalHornAudio) {
                    goalHornAudio.currentTime = 0;
                    await goalHornAudio.play();

                    // Wait for goal horn to finish or play for a few seconds
                    await new Promise(resolve => {
                        const timeout = setTimeout(() => {
                            resolve();
                        }, 3000);

                        goalHornAudio.onended = () => {
                            clearTimeout(timeout);
                            resolve();
                        };
                    });
                }

                // After goal horn, play selected song from goal horn playlist
                if (goalHornPlaylistId && playlistTracks[goalHornPlaylistId]) {
                    const tracks = playlistTracks[goalHornPlaylistId];
                    if (tracks.length > 0) {
                        let selectedTrack;
                        
                        if (selectedValue === 'random') {
                            // Play random track (original behavior)
                            selectedTrack = tracks[Math.floor(Math.random() * tracks.length)];
                        } else {
                            // Play specific track by number (1-based index)
                            const trackIndex = parseInt(selectedValue) - 1;
                            if (trackIndex >= 0 && trackIndex < tracks.length) {
                                selectedTrack = tracks[trackIndex];
                            } else {
                                // If the selected number is out of range, fall back to random
                                console.warn(`Song ${selectedValue} not available in playlist (only ${tracks.length} songs). Playing random song instead.`);
                                selectedTrack = tracks[Math.floor(Math.random() * tracks.length)];
                                showError(`Song ${selectedValue} not available in playlist. Playing random song instead.`);
                            }
                        }

                        // Update current track display
                        updateCurrentTrack({
                            name: selectedTrack.name,
                            artists: [{ name: selectedTrack.artist }]
                        });

                        // Transfer playback to our device first
                        await fetch(`https://api.spotify.com/v1/me/player`, {
                            method: 'PUT',
                            headers: {
                                'Authorization': `Bearer ${accessToken}`,
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                device_ids: [deviceId],
                                play: false
                            })
                        });

                        // Start playing the victory song
                        await fetch(`https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`, {
                            method: 'PUT',
                            headers: {
                                'Authorization': `Bearer ${accessToken}`,
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                uris: [selectedTrack.uri]
                            })
                        });
                    }
                }

            } catch (error) {
                console.error('Error playing goal horn:', error);
                showError('Error playing goal celebration: ' + error.message);
            } finally {
                // Re-enable button
                goalHornBtn.disabled = false;
                goalHornBtn.textContent = '📯 GOAL HORN 📯';
                isGoalHornPlaying = false;
            }
        }

        async function playMushroomSound() {
            const mushroomBtn = document.getElementById('mushroomBtn');
            mushroomBtn.disabled = true;

            try {
                if (mushroomAudio) {
                    mushroomAudio.currentTime = 0;
                    await mushroomAudio.play();
                }
            } catch (error) {
                console.error('Error playing mushroom sound:', error);
            } finally {
                setTimeout(() => {
                    mushroomBtn.disabled = false;
                }, 1000);
            }
        }

        async function playClockSound() {
            const clockBtn = document.getElementById('clockBtn');
            clockBtn.disabled = true;

            try {
                if (clockAudio) {
                    clockAudio.currentTime = 0;
                    await clockAudio.play();
                }
            } catch (error) {
                console.error('Error playing clock sound:', error);
            } finally {
                setTimeout(() => {
                    clockBtn.disabled = false;
                }, 1000);
            }
        }

        async function pausePlayback() {
            try {
                await fetch(`https://api.spotify.com/v1/me/player/pause?device_id=${deviceId}`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${accessToken}`
                    }
                });
            } catch (error) {
                console.error('Error pausing playback:', error);
                showError('Error pausing playback: ' + error.message);
            }
        }

        function updateCurrentTrack(track) {
            const currentTrackDisplay = document.getElementById('currentTrackDisplay');
            currentTrackDisplay.innerHTML = `
                <strong>🎵 Now Playing</strong><br>
                <span style="font-size: 1.2em;">${track.name}</span><br>
                <span style="opacity: 0.8;">by ${track.artists.map(a => a.name).join(', ')}</span>
            `;
        }

        function showError(message) {
            const errorElement = document.getElementById('errorMessage');
            errorElement.textContent = message;
            errorElement.style.display = 'block';

            // Auto-hide after 5 seconds
            setTimeout(() => {
                errorElement.style.display = 'none';
            }, 5000);
        }

        // Priority Queue Functions
        async function searchSpotify() {
            const searchInput = document.getElementById('searchInput');
            const searchBtn = document.getElementById('searchBtn');
            const searchResults = document.getElementById('searchResults');
            const query = searchInput.value.trim();

            if (!query) {
                showError('Please enter a search term');
                return;
            }

            if (isSearching) return;

            isSearching = true;
            searchBtn.disabled = true;
            searchBtn.textContent = '🔍 Searching...';

            try {
                const response = await fetch('/Home/SearchSpotify', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `query=${encodeURIComponent(query)}`
                });

                const data = await response.json();
                
                if (data.success) {
                    displaySearchResults(data.tracks);
                    searchResults.style.display = 'block';
                } else {
                    showError('Search failed: ' + data.error);
                    searchResults.style.display = 'none';
                }
            } catch (error) {
                console.error('Search error:', error);
                showError('Search failed: ' + error.message);
                searchResults.style.display = 'none';
            } finally {
                isSearching = false;
                searchBtn.disabled = false;
                searchBtn.textContent = '🔍 Search';
            }
        }

        function displaySearchResults(tracks) {
            const searchResults = document.getElementById('searchResults');
            
            if (!tracks || tracks.length === 0) {
                searchResults.innerHTML = '<div class="empty-queue">No tracks found. Try a different search term.</div>';
                return;
            }

            searchResults.innerHTML = '';
            
            tracks.forEach((track, index) => {
                const resultDiv = document.createElement('div');
                resultDiv.className = 'search-result-item';
                
                resultDiv.innerHTML = `
                    <div class="search-result-info">
                        <div class="track-name">${escapeHtml(track.name)}</div>
                        <div class="track-artist">🎤 ${escapeHtml(track.artist)}</div>
                        <div class="track-album">💿 ${escapeHtml(track.album)}</div>
                    </div>
                    <button class="add-to-queue-btn" id="addBtn${index}">
                        ➕ Add to Queue
                    </button>
                `;
                
                searchResults.appendChild(resultDiv);
                
                // Add event listener to the button
                document.getElementById(`addBtn${index}`).addEventListener('click', function() {
                    addToPriorityQueue(track.id, track.name, track.artist, track.uri);
                });
            });
        }

        async function addToPriorityQueue(trackId, trackName, trackArtist, trackUri) {
            try {
                const response = await fetch('/Home/AddToPriorityQueue', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `trackId=${encodeURIComponent(trackId)}&trackName=${encodeURIComponent(trackName)}&trackArtist=${encodeURIComponent(trackArtist)}&trackUri=${encodeURIComponent(trackUri)}`
                });

                const data = await response.json();
                
                if (data.success) {
                    // Update local queue
                    priorityQueue.push({
                        id: trackId,
                        name: trackName,
                        artist: trackArtist,
                        uri: trackUri,
                        addedAt: Date.now() / 1000
                    });

                    updatePriorityQueueDisplay();
                    showSuccess(`"${trackName}" added to priority queue!`);
                } else {
                    showError('Failed to add song to queue: ' + data.error);
                }
            } catch (error) {
                console.error('Error adding to queue:', error);
                showError('Error adding song to queue: ' + error.message);
            }
        }

        async function removeFromPriorityQueue(trackId) {
            try {
                const response = await fetch('/Home/RemoveFromPriorityQueue', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `trackId=${encodeURIComponent(trackId)}`
                });

                const data = await response.json();
                
                if (data.success) {
                    // Update local queue
                    priorityQueue = priorityQueue.filter(track => track.id !== trackId);
                    updatePriorityQueueDisplay();
                    showSuccess('Song removed from priority queue!');
                } else {
                    showError('Failed to remove song from queue: ' + data.error);
                }
            } catch (error) {
                console.error('Error removing from queue:', error);
                showError('Error removing song from queue: ' + error.message);
            }
        }

        async function clearPriorityQueue() {
            if (priorityQueue.length === 0) return;

            if (!confirm('Are you sure you want to clear the entire priority queue?')) {
                return;
            }

            try {
                const response = await fetch('/Home/ClearPriorityQueue', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: ''
                });

                const data = await response.json();
                
                if (data.success) {
                    priorityQueue = [];
                    updatePriorityQueueDisplay();
                    showSuccess('Priority queue cleared!');
                } else {
                    showError('Failed to clear queue: ' + data.error);
                }
            } catch (error) {
                console.error('Error clearing queue:', error);
                showError('Error clearing queue: ' + error.message);
            }
        }

        async function playFromPriorityQueue() {
            if (priorityQueue.length === 0) return false;

            try {
                // Get the first song from the queue
                const nextTrack = priorityQueue[0];

                // Update current track display
                updateCurrentTrack({
                    name: nextTrack.name,
                    artists: [{ name: nextTrack.artist }]
                });

                // Transfer playback to our device first
                await fetch(`https://api.spotify.com/v1/me/player`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${accessToken}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        device_ids: [deviceId],
                        play: false
                    })
                });

                // Start playing the track
                await fetch(`https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${accessToken}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        uris: [nextTrack.uri]
                    })
                });

                // Remove the played track from the queue
                await removeFromPriorityQueue(nextTrack.id);

                return true;
            } catch (error) {
                console.error('Error playing from priority queue:', error);
                showError('Error playing from priority queue: ' + error.message);
                return false;
            }
        }

        function updatePriorityQueueDisplay() {
            const queueCount = document.getElementById('queueCount');
            const queueList = document.getElementById('queueList');
            const clearQueueBtn = document.getElementById('clearQueueBtn');
            const queueStatus = document.getElementById('queueStatus');

            // Check if elements exist before using them
            if (!queueCount || !queueList || !clearQueueBtn || !queueStatus) {
                console.warn('Queue display elements not found, skipping update');
                return;
            }

            queueCount.textContent = priorityQueue.length;

            if (priorityQueue.length === 0) {
                queueList.innerHTML = '<div class="empty-queue" id="emptyQueueMessage">Your priority queue is empty. Search for songs above to add them to the queue.</div>';
                clearQueueBtn.disabled = true;
                queueStatus.style.display = 'none';
            } else {
                clearQueueBtn.disabled = false;
                queueStatus.style.display = 'block';

                queueList.innerHTML = '';
                
                priorityQueue.forEach((track, index) => {
                    const queueItemDiv = document.createElement('div');
                    queueItemDiv.className = 'queue-item';
                    
                    queueItemDiv.innerHTML = `
                        <div class="queue-item-number">${index + 1}</div>
                        <div class="queue-item-info">
                            <div class="track-name">${escapeHtml(track.name)}</div>
                            <div class="track-artist">🎤 ${escapeHtml(track.artist)}</div>
                        </div>
                        <button class="remove-from-queue-btn" id="removeBtn${index}">
                            🗑️ Remove
                        </button>
                    `;
                    
                    queueList.appendChild(queueItemDiv);
                    
                    // Add event listener to the remove button
                    const removeBtn = document.getElementById(`removeBtn${index}`);
                    if (removeBtn) {
                        removeBtn.addEventListener('click', function() {
                            removeFromPriorityQueue(track.id);
                        });
                    }
                });
            }
        }

        function showSuccess(message) {
            // Create a temporary success message
            const successElement = document.createElement('div');
            successElement.className = 'error'; // Reusing error styles but with green color
            successElement.style.background = 'rgba(40, 167, 69, 0.2)';
            successElement.style.borderColor = '#28a745';
            successElement.style.color = '#28a745';
            successElement.textContent = message;
            successElement.style.position = 'fixed';
            successElement.style.top = '20px';
            successElement.style.left = '50%';
            successElement.style.transform = 'translateX(-50%)';
            successElement.style.zIndex = '1000';
            successElement.style.maxWidth = '400px';

            document.body.appendChild(successElement);

            // Auto-hide after 3 seconds
            setTimeout(() => {
                if (successElement.parentNode) {
                    successElement.parentNode.removeChild(successElement);
                }
            }, 3000);
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Add enter key support for search
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('searchInput');
            if (searchInput) {
                searchInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        searchSpotify();
                    }
                });
            }
        });
    </script>
</body>
</html>